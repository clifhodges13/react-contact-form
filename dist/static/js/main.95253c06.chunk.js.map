{"version":3,"sources":["Contact.js","serviceWorker.js","index.js"],"names":["Contact","state","name","message","email","sent","buttonText","formSubmit","e","preventDefault","_this","setState","data","axios","post","then","res","resetForm","catch","console","log","_this2","this","react_default","a","createElement","className","onSubmit","onChange","target","value","type","placeholder","required","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Contact_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAqEeA,oNA/DbC,MAAQ,CACNC,KAAM,GACNC,QAAS,GACTC,MAAO,GACPC,MAAM,EACNC,WAAY,YAGdC,WAAa,SAACC,GACZA,EAAEC,iBAEFC,EAAKC,SAAS,CACZL,WAAY,eAGd,IAAIM,EAAO,CACTV,KAAMQ,EAAKT,MAAMC,KACjBE,MAAOM,EAAKT,MAAMG,MAClBD,QAASO,EAAKT,MAAME,SAGtBU,IAAMC,KAAK,2CAA4CF,GACpDG,KAAK,SAAAC,GACJN,EAAKC,SAAS,CACZN,MAAM,GACLK,EAAKO,eAETC,MAAM,WACLC,QAAQC,IAAI,yBAIlBH,UAAY,WACVP,EAAKC,SAAS,CACZT,KAAM,GACNC,QAAS,GACTC,MAAO,GACPE,WAAY,0FAIP,IAAAe,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOC,SAAW,SAACnB,GAAD,OAAOa,EAAKd,WAAWC,KAEvDe,EAAAC,EAAAC,cAAA,wBAEAF,EAAAC,EAAAC,cAAA,SAAOG,SAAU,SAAApB,GAAC,OAAIa,EAAKV,SAAS,CAAET,KAAMM,EAAEqB,OAAOC,SAAS5B,KAAK,OAAOwB,UAAU,eAAeK,KAAK,OAAOC,YAAY,OAAOF,MAAOR,KAAKrB,MAAMC,OAEpJqB,EAAAC,EAAAC,cAAA,SAAOG,SAAU,SAACpB,GAAD,OAAOa,EAAKV,SAAS,CAAEP,MAAOI,EAAEqB,OAAOC,SAAS5B,KAAK,QAAQwB,UAAU,gBAAgBK,KAAK,QAAQC,YAAY,iBAAiBC,UAAQ,EAACH,MAAOR,KAAKrB,MAAMG,QAE7KmB,EAAAC,EAAAC,cAAA,YAAUG,SAAU,SAAApB,GAAC,OAAIa,EAAKV,SAAS,CAAER,QAASK,EAAEqB,OAAOC,SAAS5B,KAAK,UAAUwB,UAAU,gBAAgBK,KAAK,OAAOC,YAAY,UAAUF,MAAOR,KAAKrB,MAAME,QAAS8B,UAAQ,IAElLV,EAAAC,EAAAC,cAAA,UAAQM,KAAK,UAAWT,KAAKrB,MAAMK,qBAxDvB4B,cCQFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAAaC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.95253c06.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './Contact.css';\n\nclass Contact extends Component {\n\n  state = {\n    name: '',\n    message: '',\n    email: '',\n    sent: false,\n    buttonText: 'Submit'\n  }\n\n  formSubmit = (e) => {\n    e.preventDefault()\n\n    this.setState({\n      buttonText: '...sending'\n    })\n\n    let data = {\n      name: this.state.name,\n      email: this.state.email,\n      message: this.state.message\n    }\n\n    axios.post('https://nodejs-express-lyvzyj2up.now.sh/', data)\n      .then(res => {\n        this.setState({\n          sent: true\n        }, this.resetForm())\n      })\n      .catch(() => {\n        console.log('Message not sent')\n      })\n  }\n\n  resetForm = () => {\n    this.setState({\n      name: '',\n      message: '',\n      email: '',\n      buttonText: 'Message Sent'\n    })\n  } \n\n  render() {\n    return( // will change the classNames to match my styles later\n      <div className=\"Form-container\">\n        <form className=\"form\" onSubmit={ (e) => this.formSubmit(e)}>\n\n          <h1>Contact Us</h1>\n\n          <input onChange={e => this.setState({ name: e.target.value})} name=\"name\" className=\"message-name\" type=\"text\" placeholder=\"Name\" value={this.state.name}/>\n\n          <input onChange={(e) => this.setState({ email: e.target.value})} name=\"email\" className=\"message-email\" type=\"email\" placeholder=\"your@email.com\" required value={this.state.email} />\n          \n          <textarea onChange={e => this.setState({ message: e.target.value})} name=\"message\" className=\"message-input\" type=\"text\" placeholder=\"Message\" value={this.state.message} required/>\n\n          <button type=\"submit\">{ this.state.buttonText }</button>\n\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default Contact;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Contact from './Contact';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Contact />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}